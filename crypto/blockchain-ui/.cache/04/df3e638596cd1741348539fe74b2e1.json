{"id":"node_modules/axios-logger/lib/common/string-builder.js","dependencies":[{"name":"/home/anton/projects/js/blockchain-ui/package.json","includedInParent":true,"mtime":1648445591332},{"name":"/home/anton/projects/js/blockchain-ui/.babelrc","includedInParent":true,"mtime":1646843389248},{"name":"/home/anton/projects/js/blockchain-ui/node_modules/axios-logger/package.json","includedInParent":true,"mtime":1648031604747},{"name":"dateformat","loc":{"line":8,"column":49,"index":156},"parent":"/home/anton/projects/js/blockchain-ui/node_modules/axios-logger/lib/common/string-builder.js","resolved":"/home/anton/projects/js/blockchain-ui/node_modules/dateformat/lib/dateformat.js"},{"name":"chalk","loc":{"line":10,"column":44,"index":217},"parent":"/home/anton/projects/js/blockchain-ui/node_modules/axios-logger/lib/common/string-builder.js","resolved":"/home/anton/projects/js/blockchain-ui/node_modules/axios-logger/node_modules/chalk/source/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _dateformat = _interopRequireDefault(require(\"dateformat\"));\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nclass StringBuilder {\n  constructor(config) {\n    _defineProperty(this, \"config\", void 0);\n\n    _defineProperty(this, \"printQueue\", void 0);\n\n    _defineProperty(this, \"filteredHeaderList\", void 0);\n\n    this.config = config;\n    this.printQueue = [];\n    this.filteredHeaderList = ['common', 'delete', 'get', 'head', 'post', 'put', 'patch', 'content-type', 'content-length', 'vary', 'date', 'connection', 'content-security-policy'];\n  }\n\n  makeLogTypeWithPrefix(logType) {\n    const prefix = this.config.prefixText === false ? `[${logType}]` : `[${this.config.prefixText || 'Axios'}][${logType}]`;\n    this.printQueue.push(_chalk.default.green(prefix));\n    return this;\n  }\n\n  makeDateFormat(date) {\n    // allow for opting-out of adding the timestamp (as most loggers already add this)\n    if (this.config.dateFormat !== false) {\n      // @ts-ignore\n      const dateFormat = (0, _dateformat.default)(date, this.config.dateFormat || 'isoDateTime');\n      this.printQueue.push(dateFormat);\n    }\n\n    return this;\n  }\n\n  makeHeader(headers) {\n    if (this.config.headers && headers) {\n      const headerMap = {};\n\n      for (let key in headers) {\n        if (!this.filteredHeaderList.includes(key)) {\n          headerMap[key] = headers[key];\n        }\n      }\n\n      this.printQueue.push(JSON.stringify(headerMap));\n    }\n\n    return this;\n  }\n\n  makeUrl(url, baseUrl) {\n    if (this.config.url && url) {\n      if (baseUrl) url = this.combineURLs(baseUrl, url);\n      this.printQueue.push(url);\n    }\n\n    return this;\n  }\n\n  makeParams(params) {\n    if (this.config.params && params) this.printQueue.push(JSON.stringify(params));\n    return this;\n  }\n\n  makeMethod(method) {\n    if (this.config.method && method) this.printQueue.push(_chalk.default.yellow(method.toUpperCase()));\n    return this;\n  }\n\n  makeData(data) {\n    const str = typeof data === `string` ? data : JSON.stringify(data);\n    if (this.config.data && data) this.printQueue.push(str);\n    return this;\n  }\n\n  makeStatus(status, statusText) {\n    if (this.config.status && this.config.statusText && status && statusText) this.printQueue.push(`${status}:${statusText}`);else if (this.config.status && status) this.printQueue.push(`${status}`);else if (this.config.statusText && statusText) this.printQueue.push(statusText);\n    return this;\n  }\n\n  build() {\n    return this.printQueue.join(' ');\n  }\n  /**\n   * Helper imported from Axios library\n   * @see https://github.com/axios/axios/blob/d99d5faac29899eba68ce671e6b3cbc9832e9ad8/lib/helpers/combineURLs.js\n   * */\n\n\n  combineURLs(baseURL, relativeURL) {\n    return relativeURL ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '') : baseURL;\n  }\n\n}\n\nvar _default = StringBuilder;\nexports.default = _default;\n"},"sourceMaps":{"js":{"version":3,"sources":["../../src/common/string-builder.ts"],"names":["StringBuilder","constructor","config","printQueue","filteredHeaderList","makeLogTypeWithPrefix","logType","prefix","prefixText","push","chalk","green","makeDateFormat","date","dateFormat","makeHeader","headers","headerMap","key","includes","JSON","stringify","makeUrl","url","baseUrl","combineURLs","makeParams","params","makeMethod","method","yellow","toUpperCase","makeData","data","str","makeStatus","status","statusText","build","join","baseURL","relativeURL","replace"],"mappings":"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","sourcesContent":["import dateformat from 'dateformat';\nimport { GlobalLogConfig } from './types';\nimport chalk from 'chalk';\n\nclass StringBuilder {\n    private config: GlobalLogConfig;\n    private printQueue: Array<string>;\n    private filteredHeaderList: Array<String>;\n\n    constructor(config: GlobalLogConfig) {\n        this.config = config;\n        this.printQueue = [];\n        this.filteredHeaderList = ['common', 'delete', 'get', 'head', 'post', 'put', 'patch', 'content-type', 'content-length', 'vary', 'date', 'connection', 'content-security-policy'];\n    }\n\n    makeLogTypeWithPrefix(logType: string) {\n        const prefix = this.config.prefixText === false ? `[${logType}]` : `[${this.config.prefixText || 'Axios'}][${logType}]`;\n        this.printQueue.push(chalk.green(prefix));\n        return this;\n    }\n\n    makeDateFormat(date: Date) {\n        // allow for opting-out of adding the timestamp (as most loggers already add this)\n        if (this.config.dateFormat !== false) {\n            // @ts-ignore\n            const dateFormat = dateformat(date, this.config.dateFormat || 'isoDateTime');\n            this.printQueue.push(dateFormat);\n        }\n        return this;\n    }\n\n    makeHeader(headers?: { [key:string] : {value:string}}) {\n        if(this.config.headers && headers) {\n            const headerMap:{ [key:string] : {value:string}} = {};\n            for(let key in headers) {\n                if(!this.filteredHeaderList.includes(key)) {\n                    headerMap[key] = headers[key];\n                }\n            }\n\n            this.printQueue.push(JSON.stringify(headerMap));\n        }\n        return this;\n    }\n\n    makeUrl(url?: string, baseUrl?: string) {\n        if(this.config.url && url) {\n            if(baseUrl) url = this.combineURLs(baseUrl, url);\n            this.printQueue.push(url);\n        }\n        return this;\n    }\n\n    makeParams(params?: object) {\n        if(this.config.params && params) this.printQueue.push(JSON.stringify(params));\n        return this;\n    }\n\n    makeMethod(method?: string) {\n        if(this.config.method && method) this.printQueue.push(chalk.yellow(method.toUpperCase()));\n        return this;\n    }\n\n    makeData(data: object) {\n        const str = typeof data === `string` ? data : JSON.stringify(data);\n        if(this.config.data && data) this.printQueue.push(str);\n        return this;\n    }\n\n    makeStatus(status?: number, statusText?: string) {\n        if(this.config.status && this.config.statusText && status && statusText) this.printQueue.push(`${status}:${statusText}`);\n        else if(this.config.status && status) this.printQueue.push(`${status}`);\n        else if(this.config.statusText && statusText) this.printQueue.push(statusText);\n        return this;\n    }\n\n    build() {\n        return this.printQueue.join(' ');\n    }\n\n    /**\n     * Helper imported from Axios library\n     * @see https://github.com/axios/axios/blob/d99d5faac29899eba68ce671e6b3cbc9832e9ad8/lib/helpers/combineURLs.js\n     * */\n    combineURLs(baseURL: string, relativeURL?: string): string {\n        return relativeURL\n            ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n            : baseURL;\n    };\n}\n\nexport default StringBuilder;\n"]}},"error":null,"hash":"45975bb87c710838277ae14c8c492650","cacheData":{"env":{}}}