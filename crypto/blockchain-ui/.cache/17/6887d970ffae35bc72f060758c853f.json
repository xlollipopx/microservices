{"id":"node_modules/axios-logger/lib/logger/error.js","dependencies":[{"name":"/home/anton/projects/js/blockchain-ui/package.json","includedInParent":true,"mtime":1648445591332},{"name":"/home/anton/projects/js/blockchain-ui/.babelrc","includedInParent":true,"mtime":1646843389248},{"name":"/home/anton/projects/js/blockchain-ui/node_modules/axios-logger/package.json","includedInParent":true,"mtime":1648031604747},{"name":"../common/config","loc":{"line":9,"column":22,"index":201},"parent":"/home/anton/projects/js/blockchain-ui/node_modules/axios-logger/lib/logger/error.js","resolved":"/home/anton/projects/js/blockchain-ui/node_modules/axios-logger/lib/common/config.js"},{"name":"../common/string-builder","loc":{"line":11,"column":52,"index":275},"parent":"/home/anton/projects/js/blockchain-ui/node_modules/axios-logger/lib/logger/error.js","resolved":"/home/anton/projects/js/blockchain-ui/node_modules/axios-logger/lib/common/string-builder.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.errorLogger = errorLogger;\nexports.errorLoggerWithoutPromise = errorLoggerWithoutPromise;\n\nvar _config = require(\"../common/config\");\n\nvar _stringBuilder = _interopRequireDefault(require(\"../common/string-builder\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction errorLoggerWithoutPromise(error, config = {}) {\n  const {\n    config: {\n      method,\n      baseURL,\n      params,\n      url\n    },\n    response\n  } = error;\n  let status, statusText, data, headers;\n\n  if (response) {\n    status = response.status;\n    statusText = response.statusText;\n    data = response.data;\n    headers = response.headers;\n  }\n\n  const buildConfig = (0, _config.assembleBuildConfig)(config);\n  const stringBuilder = new _stringBuilder.default(buildConfig);\n  const log = stringBuilder.makeLogTypeWithPrefix('Error').makeDateFormat(new Date()).makeMethod(method).makeUrl(url, baseURL).makeParams(params).makeStatus(status, statusText).makeHeader(headers).makeData(data).build();\n  buildConfig.logger(log);\n  return error;\n}\n\nfunction errorLogger(error, config) {\n  return Promise.reject(errorLoggerWithoutPromise(error, config));\n}\n"},"sourceMaps":{"js":{"version":3,"sources":["../../src/logger/error.ts"],"names":["errorLoggerWithoutPromise","error","config","method","baseURL","params","url","response","status","statusText","data","headers","buildConfig","stringBuilder","StringBuilder","log","makeLogTypeWithPrefix","makeDateFormat","Date","makeMethod","makeUrl","makeParams","makeStatus","makeHeader","makeData","build","logger","errorLogger","Promise","reject"],"mappings":";;;;;;;;AAEA;;AACA;;;;AAEA,SAASA,yBAAT,CAAmCC,KAAnC,EAAsDC,MAAsB,GAAG,EAA/E,EAAmF;AAE/E,QAAM;AAACA,IAAAA,MAAM,EAAE;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,OAAV;AAAmBC,MAAAA,MAAnB;AAA2BC,MAAAA;AAA3B,KAAT;AAA2CC,IAAAA;AAA3C,MAAuDN,KAA7D;AAEA,MAAIO,MAAJ,EAAYC,UAAZ,EAAwBC,IAAxB,EAA8BC,OAA9B;;AACA,MAAIJ,QAAJ,EAAc;AACVC,IAAAA,MAAM,GAAGD,QAAQ,CAACC,MAAlB;AACAC,IAAAA,UAAU,GAAGF,QAAQ,CAACE,UAAtB;AACAC,IAAAA,IAAI,GAAGH,QAAQ,CAACG,IAAhB;AACAC,IAAAA,OAAO,GAAGJ,QAAQ,CAACI,OAAnB;AACH;;AAED,QAAMC,WAAW,GAAG,iCAAoBV,MAApB,CAApB;AAEA,QAAMW,aAAa,GAAG,IAAIC,sBAAJ,CAAkBF,WAAlB,CAAtB;AACA,QAAMG,GAAG,GAAGF,aAAa,CACpBG,qBADO,CACe,OADf,EAEPC,cAFO,CAEQ,IAAIC,IAAJ,EAFR,EAGPC,UAHO,CAGIhB,MAHJ,EAIPiB,OAJO,CAICd,GAJD,EAIMF,OAJN,EAKPiB,UALO,CAKIhB,MALJ,EAMPiB,UANO,CAMId,MANJ,EAMYC,UANZ,EAOPc,UAPO,CAOIZ,OAPJ,EAQPa,QARO,CAQEd,IARF,EASPe,KATO,EAAZ;AAWAb,EAAAA,WAAW,CAACc,MAAZ,CAAmBX,GAAnB;AAEA,SAAOd,KAAP;AACH;;AAED,SAAS0B,WAAT,CAAqB1B,KAArB,EAAwCC,MAAxC,EAAiE;AAC7D,SAAO0B,OAAO,CAACC,MAAR,CAAe7B,yBAAyB,CAACC,KAAD,EAAQC,MAAR,CAAxC,CAAP;AACH","sourcesContent":["import { AxiosError } from 'axios';\nimport { ErrorLogConfig } from '../common/types';\nimport { assembleBuildConfig } from '../common/config';\nimport StringBuilder from '../common/string-builder';\n\nfunction errorLoggerWithoutPromise(error: AxiosError, config: ErrorLogConfig = {}) {\n\n    const {config: { method, baseURL, params, url }, response} = error;\n\n    let status, statusText, data, headers;\n    if (response) {\n        status = response.status;\n        statusText = response.statusText;\n        data = response.data;\n        headers = response.headers;\n    }\n\n    const buildConfig = assembleBuildConfig(config);\n\n    const stringBuilder = new StringBuilder(buildConfig);\n    const log = stringBuilder\n        .makeLogTypeWithPrefix('Error')\n        .makeDateFormat(new Date())\n        .makeMethod(method)\n        .makeUrl(url, baseURL)\n        .makeParams(params)\n        .makeStatus(status, statusText)\n        .makeHeader(headers)\n        .makeData(data)\n        .build();\n\n    buildConfig.logger(log);\n\n    return error;\n}\n\nfunction errorLogger(error: AxiosError, config?: ErrorLogConfig) {\n    return Promise.reject(errorLoggerWithoutPromise(error, config));\n}\n\nexport { errorLogger, errorLoggerWithoutPromise };\n"]}},"error":null,"hash":"d8f04a64995a32e8695d1713fb00863f","cacheData":{"env":{}}}